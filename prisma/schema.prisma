// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id           String    @id @default(uuid())
    userId       String    @unique
    email        String    @unique @db.Text
    passwordHash String?
    firstName    String?
    lastName     String?
    sessions     Session[]
    posts        Post[]

    imageUrl       String  @default("https://www.kindpng.com/picc/m/171-1712282_profile-icon-png-profile-icon-vector-png-transparent.png") @db.Text
    headerImageUrl String? @db.Text
    bio            String?

    userName              String? @unique
    accountNumber         String? @unique
    bankCode              String?
    bankAccountName       String?
    bankName              String?
    transferRecipientCode String?

    balance Int @default(0)

    isVerified Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    support          Support[] @relation("SupportsMade")
    supportsReceived Support[] @relation("SupportsReceived")

    payoutHistory Payout[]
    comments      Comment[] // Relation to comments

    followers Follows[] @relation("following")
    following Follows[] @relation("follower")

    socialMediaLink SocialMediaLink[]
    tags            String[]
}

model Support {
    id String @id @default(uuid())

    profileId   String
    profile     Profile  @relation("SupportsReceived", fields: [profileId], references: [id], onDelete: Cascade)
    supporterId String?
    supporter   Profile? @relation("SupportsMade", fields: [supporterId], references: [id])

    name      String
    anonymous Boolean @default(false)
    content   String  @db.Text

    amount        Int
    numberOfZobo  Int
    paymentRef    String? // Field for the reference of the payment
    paymentStatus PaymentStatus? // Field for the status of the payment

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    deleted Boolean @default(false)

    comments Comment[] // Relation to comments
}

enum SocialMediaType {
    FACEBOOK
    TWITTER
    INSTAGRAM
    YOUTUBE
    LINKEDIN
    GITHUB
    TIKTOK
    TWITCH
    MEDIUM
    OTHER
}

model SocialMediaLink {
    id     String          @id @default(uuid())
    type   SocialMediaType
    url    String
    userId String
    user   Profile         @relation(fields: [userId], references: [id])

    @@unique([userId, type]) // Optional: Ensures one type of each link per user
}

model Follows {
    follower    Profile @relation("follower", fields: [followerId], references: [id])
    followerId  String
    following   Profile @relation("following", fields: [followingId], references: [id])
    followingId String

    @@id([followerId, followingId])
}

model Session {
    id        String   @id
    expiresAt DateTime
    userId    String
    profile   Profile  @relation(references: [userId], fields: [userId], onDelete: Cascade)
}

model Payout {
    id        String  @id @default(uuid())
    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    paystackTransferId    String
    amount                Int
    status                PaymentStatus @default(PENDING) // Field for the status of the payment
    transferRecipientCode String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
}

model Post {
    id        String   @id @default(uuid())
    profileId String
    profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
    imageUrl  String
    caption   String   @db.Text
    title     String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Comment {
    id        String   @id @default(uuid())
    profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String?
    supportId String
    support   Support  @relation(fields: [supportId], references: [id], onDelete: Cascade)
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum NotificationType {
    Welcome
    BoughtZobo
}

model Notification {
    id         String           @id @default(uuid())
    userId     String
    type       NotificationType
    senderId   String?
    resourceId String
    content    String?
    isRead     Boolean          @default(false)
    createdAt  DateTime         @default(now())
}
