// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id           String    @id @default(uuid())
    userId       String    @unique
    email        String    @unique @db.Text
    passwordHash String
    firstName    String?
    lastName     String?
    sessions     Session[]

    imageUrl       String  @default("https://www.kindpng.com/picc/m/171-1712282_profile-icon-png-profile-icon-vector-png-transparent.png") @db.Text
    headerImageUrl String? @db.Text
    bio            String?

    userName              String? @unique
    accountNumber         String? @unique
    bankCode              String?
    bankAccountName       String?
    bankName              String?
    transferRecipientCode String?

    balance Int @default(0)

    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    support       Support[]
    payoutHistory Payout[]
}

model Session {
    id        String   @id
    expiresAt DateTime
    userId    String
    profile   Profile  @relation(references: [userId], fields: [userId], onDelete: Cascade)
}

model Support {
    id        String  @id @default(uuid())
    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    name      String
    anonymous Boolean @default(false)
    content   String  @db.Text

    amount        Int
    numberOfZobo  Int
    paymentRef    String? // Field for the reference of the payment
    paymentStatus PaymentStatus? // Field for the status of the payment

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    comments Comment[] // Relation to comments
}

model Payout {
    id        String  @id @default(uuid())
    profileId String
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

    paystackTransferId    String
    amount                Int
    status                PaymentStatus @default(PENDING) // Field for the status of the payment
    transferRecipientCode String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
}

model Comment {
    id        String   @id @default(uuid())
    supportId String
    support   Support  @relation(fields: [supportId], references: [id], onDelete: Cascade)
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
