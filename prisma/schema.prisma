// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id                    String            @id @default(uuid())
    userId                String            @unique
    email                 String            @unique @db.Text
    passwordHash          String?
    firstName             String?
    lastName              String?
    sessions              Session[]
    posts                 Post[]
    articles              Article[]
    imageUrl              String?
    headerImageUrl        String?           @db.Text
    bio                   String?
    userName              String?            @unique
    accountNumber         String?           @unique
    bankCode              String?
    bankAccountName       String?
    bankName              String?
    transferRecipientCode String?
    balance               Int               @default(0)
    isVerified            Boolean           @default(false)
    createdAt             DateTime          @default(now())
    updatedAt             DateTime          @updatedAt
    support               Support[]         @relation("SupportsMade")
    supportsReceived      Support[]         @relation("SupportsReceived")
    payoutHistory         Payout[]
    comments              Comment[] // Relation to comments
    followers             Follows[]         @relation("following")
    following             Follows[]         @relation("follower")
    socialMediaLink       SocialMediaLink[]
    tags                  String[] // Indexes
    feedback              Feedback[]

    @@index([userId], name: "idx_profile_userId")
    @@index([email], name: "idx_profile_email")
    @@index([userName], name: "idx_profile_userName")
}

model Support {
    id            String         @id @default(uuid())
    profileId     String
    profile       Profile        @relation("SupportsReceived", fields: [profileId], references: [id], onDelete: Cascade)
    supporterId   String?
    supporter     Profile?       @relation("SupportsMade", fields: [supporterId], references: [id])
    name          String
    anonymous     Boolean        @default(false)
    content       String         @db.Text
    amount        Int
    numberOfZobo  Int
    paymentRef    String?
    paymentStatus PaymentStatus?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    deleted       Boolean        @default(false)
    comments      Comment[]
    revenue       Revenue[] // Relation to Revenue model

    // Foreign keys
    @@index([profileId], name: "idx_support_profileId")
    @@index([supporterId], name: "idx_support_supporterId")
}

model SocialMediaLink {
    id     String          @id @default(uuid())
    type   SocialMediaType
    url    String
    userId String
    user   Profile         @relation(fields: [userId], references: [id])

    @@unique([userId, type])
    // Foreign keys
    @@index([userId], name: "idx_socialMediaLink_userId")
}

model Follows {
    follower    Profile @relation("follower", fields: [followerId], references: [id])
    followerId  String
    following   Profile @relation("following", fields: [followingId], references: [id])
    followingId String

    @@id([followerId, followingId])
    // Foreign keys
    @@index([followerId], name: "idx_follows_followerId")
    @@index([followingId], name: "idx_follows_followingId")
}

model Session {
    id        String   @id
    expiresAt DateTime
    userId    String
    profile   Profile  @relation(references: [userId], fields: [userId], onDelete: Cascade)

    // Foreign keys
    @@index([userId], name: "idx_session_userId")
}

model Payout {
    id                    String        @id @default(uuid())
    profileId             String
    profile               Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
    paystackTransferId    String
    amount                Int
    status                PaymentStatus @default(PENDING)
    transferRecipientCode String
    createdAt             DateTime      @default(now())
    updatedAt             DateTime      @updatedAt

    // Foreign keys
    @@index([profileId], name: "idx_payout_profileId")
}

model Post {
    id        String   @id @default(uuid())
    profileId String
    profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
    imageUrl  String
    caption   String   @db.Text
    title     String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Foreign keys
    @@index([profileId], name: "idx_post_profileId")
}

model Comment {
    id        String   @id @default(uuid())
    profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String?
    content   String   @db.Text
    supportId String?
    support   Support? @relation(fields: [supportId], references: [id], onDelete: Cascade)
    Article   Article? @relation(fields: [articleId], references: [id])
    articleId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Foreign keys
    @@index([profileId], name: "idx_comment_profileId")
    @@index([supportId], name: "idx_comment_supportId")
    @@index([articleId], name: "idx_comment_articleId")
}

model Notification {
    id         String           @id @default(uuid())
    userId     String
    type       NotificationType
    senderId   String?
    resourceId String
    content    String?
    isRead     Boolean          @default(false)
    createdAt  DateTime         @default(now())

    // Foreign keys
    @@index([userId], name: "idx_notification_userId")
    @@index([senderId], name: "idx_notification_senderId")
}

model Article {
    id        String    @id @default(uuid())
    title     String
    path      String?
    image     String?
    content   Json?
    profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String?
    comments  Comment[]
    views     Int       @default(0)
    type      PostType
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    // Foreign keys
    @@index([profileId], name: "idx_article_profileId")
}

model Revenue {
    id        String   @id @default(uuid())
    supportId String
    support   Support  @relation(fields: [supportId], references: [id], onDelete: Cascade)
    amount    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Foreign keys
    @@index([supportId], name: "idx_revenue_supportId")
}

model Feedback {
    id        String   @id @default(uuid())
    user      Profile? @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?
    name      String?
    email      String?
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Foreign keys
    @@index([userId], name: "idx_feedback_userId")
}

enum SocialMediaType {
    FACEBOOK
    TWITTER
    INSTAGRAM
    YOUTUBE
    LINKEDIN
    GITHUB
    TIKTOK
    TWITCH
    MEDIUM
    OTHER
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
}

enum NotificationType {
    Welcome
    BoughtZobo
}

enum PostType {
    DRAFT
    PUBLISHED
}
